#pragma once

dfa NT UNICODE_STRING_::_Init(cx CH* buf, SI len)
{
    tx->Length = U2(len * siz(buf[0]));
    tx->MaximumLength = U2(tx->Length + siz(buf[0]));
    tx->Buffer = const_cast<TO(tx->Buffer)>(buf);
}
dfa UNICODE_STRING_::UNICODE_STRING_() : Length(0), MaximumLength(0), Buffer(NUL)
{
}
dfa UNICODE_STRING_::UNICODE_STRING_(cx CH* buf, SI len)
{
    tx->_Init(buf, len);
}
dfa UNICODE_STRING_::UNICODE_STRING_(cx CH* buf)
{
    tx->_Init(buf, StrLen(buf));
}
dfa NT OBJECT_ATTRIBUTES_::_Init(cx UNICODE_STRING_* objectName)
{
    tx->Length = siz(OBJECT_ATTRIBUTES_);
    tx->RootDirectory = NUL;
    tx->ObjectName = objectName;
    tx->Attributes = 0;
    tx->SecurityDescriptor = NUL;
    tx->SecurityQualityOfService = NUL;
}
dfa OBJECT_ATTRIBUTES_::OBJECT_ATTRIBUTES_()
{
    tx->_Init(NUL);
}
dfa OBJECT_ATTRIBUTES_::OBJECT_ATTRIBUTES_(cx UNICODE_STRING_& objectName)
{
    tx->_Init(&objectName);
}
dfa LARGE_INTEGER_::LARGE_INTEGER_()
{
    tx->QuadPart = 0;
}
dfa LARGE_INTEGER_::LARGE_INTEGER_(S8 val)
{
    tx->QuadPart = val;
}

// [generated code begin]
cxex cx FNV1A64 g_uniNtFnHash[UNI_NT_FN_CNT] = {
    0x0EA8815DD2EFDD00, 0xFF3367EA540125F6, 0x7E3399C0B3006553, 0xE655892078CEBCB7, 0x30ADCF95DB777C33, 0x4C79C7D07705B820, 0x102A162927837997, 0xAF58EA4C20FF953A, 0xBF07814C6980EFBB,
    0xAA78D189849AE32A, 0x5C728857379F4823, 0x20E81124D315518D, 0x33DDCB64301BF051, 0x3BEA12BFF15AF27B, 0xBE2A173590EB98AC, 0x272E48A30EEE4F4E, 0x244D0DC586153A2E, 0xCA3BBCDEEA4C5273,
    0x310CA138234D5858, 0x7DD1F2852298B6F1, 0x6AD38702D74DB9C9, 0xFD8709776B1FA8CE, 0x7958411BB9796EAF, 0xD76E613E35532D31, 0x78ED0786DD447196, 0x1040E539C8B4794D, 0x834766A6BE1D9752,
    0xAA6B86688A545BB5, 0x4B7D5A81C84814A2, 0x9ED767CA6B7A2CCF, 0xB8E861D9B40AB4D7, 0xD34E6B4E1183FF86, 0x7A2F0E9BB66A8A53, 0xC4BA71365BD115A8, 0x6B32C590C9017991, 0x97EFC02614FD349C,
    0xC300F03F7722C6CA, 0x7952816AD9A7E0B8, 0x35A03309F7AF25F6, 0x3E8DE3E62D3506F5, 0x55514E7A594CE207, 0x681FCA466348E060, 0x6DF4DA144A2AE5AA, 0x4F1BF6228E85F6FF, 0x050409F02196EFD7,
    0x76A9BD7CF089A8BC, 0x6CF92E60AE58CA05, 0x98B4AEFC7F8D5024, 0x90C8A9E5ECA9DF5C, 0x76B06622D435A5B7, 0x4814AB82CDA82264, 0xD199AABAC8ACE8BB, 0x50DE1B6EA87A35E8, 0xB08C7834ADB5676E,
    0x5C21340B3556DB71, 0xA279E852D293D640, 0x031EDE156D6FE916, 0x9D7C0A35C6CB987A, 0xCE24B4E5D9008A0E, 0x17534F872C08DAF3, 0xF71A77DEDE1783A1, 0x53BD73A336399FF7, 0x70CF355758CD98BC};
// [generated code end]

cxex SI UNI_NT_FN_CNT_NO_KEY = 6;

dfa ER UniNtLoad()
{
    MdlFnCache uniNtLoadCache;
    ife (uniNtLoadCache.CacheDll(L"ntdll.dll"))
        retep;
    cx AU fnCntNoKey = UNI_NT_FN_CNT_NO_KEY;
    cx AU fnCntYesKey = UNI_NT_FN_CNT - UNI_NT_FN_CNT_NO_KEY;
    ite (i, i < fnCntNoKey)
        ifu ((g_uniNtFn[i] = uniNtLoadCache.FnAdrGet(g_uniNtFnHash[i])) == NUL)
            rete(ErrVal::NO_EXIST);
    cx AU loadKey = SysTestSandbox();
    ite (i, i < fnCntYesKey)
        ifu ((g_uniNtFn[i + fnCntNoKey] = uniNtLoadCache.FnAdrGet(g_uniNtFnHash[i + fnCntNoKey] ^ loadKey)) == NUL)
            rete(ErrVal::NO_EXIST);
    rets;
}
